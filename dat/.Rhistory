shiny::runApp('Shiny/omics-app/Application')
shiny::runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
install.packages('readr')
library(readr)
library("readr", lib.loc="~/R/win-library/3.5")
shiny::runApp('Shiny/omics-app/Application')
library(ggplot2)
library(shinydashboard)
install.packages('ggplot2')
library(ggplot2)
install.packages('shinydashboard')
install.packages("shinydashboard")
install.packages("shiny")
install.packages("plotly")
install.packages("DT")
install.packages("stringr")
install.packages("mzR")
setRepositories()
install.packages("mzR")
install.packages("dplyr")
install.packages("shinyalert")
install.packages("leaflet")
install.packages("leaflet")
install.packages("readr")
library(ggplot2)
library(shinydashboard)
library(shiny)
library(plotly)
library(DT)
library(stringr)
library(mzR)
library(dplyr)
library(shinyalert)
library(leaflet)
library(splitstackshape)
library(readr)
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
?cSplit
runApp('Shiny/omics-app/Application')
shiny::runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
print(paste("http://pgb.liv.ac.uk/~andrew/crowdsource-server/src/public_html/?page=results&job=","17"))
?paste
print(paste("http://pgb.liv.ac.uk/~andrew/crowdsource-server/src/public_html/?page=results&job","17",sep = "="))
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
ip <- as.data.frame(installed.packages())
head(ip)
ip <- subset(ip, !grepl("MRO", ip$LibPath))
ip <- ip[!(ip[,"Priority"] %in% c("base", "recommended")),]
path.lib <- unique(ip$LibPath)
pkgs.to.remove <- ip[,1]
head(pkgs.to.remove)
sapply(pkgs.to.remove, remove.packages, lib = path.lib)
help(.libPaths)
install.packages('ggplot2')
library(ggplot2)
install.packages('ggplot2')
install.packages('shiny')
installed.packages('shinydashboard')
installed.packages('shinydashboard')
library(shinydashboard)
installed.packages('shinydashboard')
install.packages('shinydashboard')
install.packages('plotly')
install.packages('DT')
install.packages('stringr')
setRepositories()
install.packages('mzR')
library(dplyr)
install.packages('shinyalert')
install.packages('leaflet')
chooseCRANmirror()
install.packages('splitstackshape')
install.packages('readr')
library(ggplot2)
library(shiny)
library(shinydashboard)
library(plotly)
library(DT)
library(stringr)
library(mzR)
library(dplyr)
library(shinyalert)
library(leaflet)
library(splitstackshape)
library(readr)
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
?head
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
shiny::runApp('Shiny/omics-app/Application')
shiny::runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
a <- "boo"
length(a)
nchar(a)
ifelse(nchar(a)>0,TRUE),FALSE)
ifelse(nchar(a)>0,TRUE,FALSE)
a <- ""
ifelse(nchar(a)>0,TRUE,FALSE)
runApp('Shiny/omics-app/Application')
library(plotly)
p <- plot_ly(data = iris, x = ~Sepal.Length, y = ~Petal.Length,
marker = list(size = 10,
color = 'rgba(255, 182, 193, .9)',
line = list(color = 'rgba(152, 0, 0, .8)',
width = 2))) %>%
layout(title = 'Styled Scatter',
yaxis = list(zeroline = FALSE),
xaxis = list(zeroline = FALSE))
p
shiny::runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
swirl()
swift()
library(swirl)
swirl()
head(pollution)
View(pollution)
dim(pollution)
summary(pollution$pm25)
summary(ppm)
quantile(ppm)
boxplot(ppm)
boxplot(ppm,col = "blue")
a
boxplot(ppm,col = "blue",)
boxplot(ppm,col = "blue")
abline(h=12)
hist(ppm,col = green)
hist(ppm,col = "green")
rug(ppm)
high
low
high
hist(ppm,col = "green", breaks = 100)
rug(ppm)
hist(ppm,col = "green")
abline(v=12, lwd =2)
abline(v=median(ppm), col="magenta",lwd =4)
hist(pollution,col = "green")
names(pollution)
reg <- table(pollution$fips)
reg <- table(pollution$region)
reg
barplot(reg, col = "wheat", main = string)
barplot(reg, col = "wheat", main = )
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
exit
exit()
library(swirl)
swirl()
1
swirl()
shiny::runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
library('Rccp')
install.packages("'rccp'")
library('Rcpp')
ip <- as.data.frame(installed.packages()[,c(1,3:4)])
rownames(ip) <- NULL
ip <- ip[is.na(ip$Priority),1:2,drop=FALSE]
print(ip, row.names=FALSE)
setwd("~/Shiny/omics-app/Application - standalone/dat")
library("mzR")
f <- dir()
x <- openIDfile(target)
target <- f[4]
x <- openIDfile(target)
p <- psms(x)
scr <- score(x)
merged_df <- merge(p, scr, by="spectrumID")
View(merged_df)
View(p)
View(scr)
View(merged_df)
View(scr)
head(scr[-1])
correctly_merged_df <- cbind(p, scr[-1])
View(correctly_merged_df)
