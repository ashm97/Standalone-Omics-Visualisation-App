library(shiny)
library(plotly)
library(DT)
library(stringr)
library(mzR)
library(dplyr)
library(shinyalert)
library(leaflet)
library(splitstackshape)
library(readr)
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
?cSplit
runApp('Shiny/omics-app/Application')
shiny::runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
print(paste("http://pgb.liv.ac.uk/~andrew/crowdsource-server/src/public_html/?page=results&job=","17"))
?paste
print(paste("http://pgb.liv.ac.uk/~andrew/crowdsource-server/src/public_html/?page=results&job","17",sep = "="))
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
ip <- as.data.frame(installed.packages())
head(ip)
ip <- subset(ip, !grepl("MRO", ip$LibPath))
ip <- ip[!(ip[,"Priority"] %in% c("base", "recommended")),]
path.lib <- unique(ip$LibPath)
pkgs.to.remove <- ip[,1]
head(pkgs.to.remove)
sapply(pkgs.to.remove, remove.packages, lib = path.lib)
help(.libPaths)
install.packages('ggplot2')
library(ggplot2)
install.packages('ggplot2')
install.packages('shiny')
installed.packages('shinydashboard')
installed.packages('shinydashboard')
library(shinydashboard)
installed.packages('shinydashboard')
install.packages('shinydashboard')
install.packages('plotly')
install.packages('DT')
install.packages('stringr')
setRepositories()
install.packages('mzR')
library(dplyr)
install.packages('shinyalert')
install.packages('leaflet')
chooseCRANmirror()
install.packages('splitstackshape')
install.packages('readr')
library(ggplot2)
library(shiny)
library(shinydashboard)
library(plotly)
library(DT)
library(stringr)
library(mzR)
library(dplyr)
library(shinyalert)
library(leaflet)
library(splitstackshape)
library(readr)
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
?head
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
shiny::runApp('Shiny/omics-app/Application')
shiny::runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
a <- "boo"
length(a)
nchar(a)
ifelse(nchar(a)>0,TRUE),FALSE)
ifelse(nchar(a)>0,TRUE,FALSE)
a <- ""
ifelse(nchar(a)>0,TRUE,FALSE)
runApp('Shiny/omics-app/Application')
library(plotly)
p <- plot_ly(data = iris, x = ~Sepal.Length, y = ~Petal.Length,
marker = list(size = 10,
color = 'rgba(255, 182, 193, .9)',
line = list(color = 'rgba(152, 0, 0, .8)',
width = 2))) %>%
layout(title = 'Styled Scatter',
yaxis = list(zeroline = FALSE),
xaxis = list(zeroline = FALSE))
p
shiny::runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
swirl()
swift()
library(swirl)
swirl()
head(pollution)
View(pollution)
dim(pollution)
summary(pollution$pm25)
summary(ppm)
quantile(ppm)
boxplot(ppm)
boxplot(ppm,col = "blue")
a
boxplot(ppm,col = "blue",)
boxplot(ppm,col = "blue")
abline(h=12)
hist(ppm,col = green)
hist(ppm,col = "green")
rug(ppm)
high
low
high
hist(ppm,col = "green", breaks = 100)
rug(ppm)
hist(ppm,col = "green")
abline(v=12, lwd =2)
abline(v=median(ppm), col="magenta",lwd =4)
hist(pollution,col = "green")
names(pollution)
reg <- table(pollution$fips)
reg <- table(pollution$region)
reg
barplot(reg, col = "wheat", main = string)
barplot(reg, col = "wheat", main = )
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
exit
exit()
library(swirl)
swirl()
1
swirl()
shiny::runApp('Shiny/omics-app/Application')
runApp('Shiny/omics-app/Application')
library('Rccp')
install.packages("'rccp'")
shiny::runApp('Shiny/omics-app/Application - standalone')
runApp('Shiny/omics-app/Application - standalone')
runApp('Shiny/omics-app/Application - standalone')
library(swirl)
swirl()
map_chr(c(5, 3, 4), int_to_string)
map_lgl(c(1, 2, 3, 4, 5),b=3,gt())
map_lgl(a=c(1, 2, 3, 4, 5),b=3,gt())
map_lgl(a=c(1, 2, 3, 4, 5),b=3,gt(a,b))
map_lgl(a=c(1, 2, 3, 4, 5),b=3,gt)
map_lgl(c(1, 2, 3, 4, 5),b=3,gt)
map_if(c(1, 2, 3, 4), is_even,square)
map_if(c(4, 6, 2, 3, 8), c(1,3,4),square)
map_at(c(4, 6, 2, 3, 8), c(1,3,4),square)
map2_chr(1:26,a:z,paste)
map2_chr(1:26,letters,paste)
map2_chr(letters, 1:26, paste)
?reduce
reduce(c(1, 3, 5, 7),add_talk)
reduce(c("a", "b", "c", "d"),paste_talk
)
reduce_right(c("a", "b", "c", "d"),paste_talk())
reduce_right(c("a", "b", "c", "d"),paste_talk)
has_element(random_ints)
has_element(random_ints())
has_element(45, random_ints)
has_element(random_ints, 45)
detect(random_ints, is_even)
detect_index(random_ints, is_even)
keep(random_ints, is_even)
discard(random_ints, is_even)
every(random_ints, <100)
every(random_ints, !gt(b=100))
every(random_ints, !gt(a,b=100))
every(!gt(a=random_ints,b=100))
every(random_ints < 100)
every(random_ints,function(x){if(x > 100 return(FALSE))}else{return(TRUE)})
every(random_ints,function(x){if(x > 100)return(TRUE)}else{return(TRUE)})
every(random_ints,function(x)if(x > 100)return(TRUE)else{return(TRUE)})
every(random_ints, function(x){x < 100})
gt_10 <- function(x){}
gt_10 <- partial(gt, b = 10)
gt_10(11)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
suppressMessages(library(caret))
View(segmentationOriginal)
#1. Subset the data to a training set and testing set based on the Case variable in the data set.
inTrain <- createDataPartition(y=segmentationOriginal$Case,p=0.6,list = F)
training <- segmentationOriginal[inTrain, ]
testing <- segmentationOriginal[-inTrain, ]
set.seed(125)
modFit <- train(Class ~ ., method = "rpart", data = training)
View(modFit)
modFit
modFit$finalModel
plot(modFit$finalModel, uniform = TRUE, main =  "Classification Tree")
text(modFit$finalModel, use.n = T, all = T, cex=.8)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$finalModel)
library(pgmm)
data(olive)
olive = olive[, -1]
library(pgmm)
data(olive)
olive = olive[, -1]
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[, -1]
View(olive)
newdata = as.data.frame(t(colMeans(olive)))
View(olive)
View(newdata)
inTrain <- createDataPartition(y=olive$Area,p=0.6,list = F)
training <- segmentationOriginal[inTrain, ]
testing <- segmentationOriginal[-inTrain, ]
suppressMessages(library(caret))
library(AppliedPredictiveModeling)
inTrain <- createDataPartition(y=olive$Area,p=0.6,list = F)
training <- segmentationOriginal[inTrain, ]
testing <- segmentationOriginal[-inTrain, ]
training <- olive[inTrain, ]
testing <- olive[-inTrain, ]
set.seed(125)
modFit <- train(Area ~ ., method = "rpart", data = olive)
modFit
library(rattle)
fancyRpartPlot(modFit$finalModel)
predict(modFit, newdata = newdata)
suppressMessages(library(caret))
library(AppliedPredictiveModeling)
library(ElemStatLearn)
install.packages("ElemStattLearn")
setRepositories()
install.packages("ElemStattLearn")
library(ElemStatLearn)
data(SAheart)
library(swirl)
swirl()
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source('~/R/win-library/3.5/swirl/Courses/Exploratory_Data_Analysis/Dimension_Reduction/addPatt.R')
source("addPatt.R", local=TRUE)
heatmap(dataMatrix)
mat
svd(mat)
skip()
svd(scale(mat))
prcomp(scale(mat))
skip()
svd1$d
head(constantMatrix)
svd2
svd2$d
svd2[,c(1,2)]
svd2
svd2$v[,1:2]
skip()
dim(faceData)
skip()
a1
myImage(a1)
skip()
myImage(a2)
a2 <- svd1$u[,1:5] %*%  diag(svd1$d[1:5])  %*% t(svd1$v[,1:5])
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
skip()
View(ssd)
dim(ssd)
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
dim(pm0)
library(ElemStatLearn)
library(caret)
library(AppliedPredictiveModeling)
library(pgmm)
library(rpart)
library(gbm)
library(lubridate)
library(forecast)
library(e1071)
pml_testing <- read.csv("C:/Users/Ash/OneDrive/MRes Advanced Biological Sciences/LIFE714 - Negotiated Research Skills/6 - Machine Learning/Project/Data/pml-testing.csv", stringsAsFactors = F)
pml_training <- read.csv("C:/Users/Ash/OneDrive/MRes Advanced Biological Sciences/LIFE714 - Negotiated Research Skills/6 - Machine Learning/Project/Data/pml-training.csv", stringsAsFactors = F)
#set the classe column to the factor of which we will predict
pml_training$classe <- as.factor(pml_training$classe)
# Lots of columns are mostly NA values so remove
maxNAPerc = 20
maxNACount <- nrow(pml_training) / 100 * maxNAPerc
removeColumns <- which(colSums(is.na(pml_training) | pml_training=="") > maxNACount)
training.cleaned <- pml_training[,-removeColumns]
testing.cleaned <- pml_training[,-removeColumns]
#Remove columns non needed: names, time related
training.cleaned <- training.cleaned[,-seq(1:7)]
testing.cleaned <- testing.cleaned[,-seq(1:7)]
set.seed(35555)
partition <- createDataPartition(y=training.cleaned$classe, p=0.70, list=FALSE)
training.subSetTrain <- training.cleaned[partition, ]
training.subSetTest <- training.cleaned[-partition, ]
# See what features are highly correlated with classe
correlations <- cor(training.subSetTrain[, -which(names(training.cleaned) == "classe")], as.numeric(training.subSetTrain$classe))
bestCorrelations <- subset(as.data.frame(as.table(correlations)), abs(Freq)>0.3)
bestCorrelations
p1 <- ggplot(training.subSetTrain, aes(classe, pitch_forearm)) +
geom_boxplot(aes(fill=classe))
p1
training.subSetTrain.pca <- prcomp(training.subSetTrain[, -which(names(training.cleaned) == "classe")])
training.subSetTrain.pca
training.subSetTrain.pca <- prcomp(training.subSetTrain[, -which(names(training.cleaned) == "classe")],center = T,scale. = T)
summary(training.subSetTrain.pca)
plot(training.subSetTrain.pca$sdev)
plot(training.subSetTrain.pca$center)
plot(training.subSetTrain.pca$scale)
plot(training.subSetTrain.pca$sdev)
plot(training.subSetTrain.pca$rotation)
plot(training.subSetTrain.pca$x)
plot(training.subSetTrain.pca$x)
install.packages('ggfortify')
library(ggfortify)
autoplot(prcomp(training.subSetTrain[, -which(names(training.cleaned) == "classe")]), data = training.subSetTrain, colour = 'Classe')
autoplot(prcomp(training.subSetTrain[, -which(names(training.cleaned) == "classe")]), data = training.subSetTrain, colour = Classe)
View(training.subSetTrain)
autoplot(prcomp(training.subSetTrain[, -which(names(training.cleaned) == "classe")]), data = training.subSetTrain, colour = classe)
autoplot(prcomp(training.subSetTrain[, -which(names(training.cleaned) == "classe")]), data = training.subSetTrain, colour = "classe")
autoplot(prcomp(training.subSetTrain[, -which(names(training.cleaned) == "classe")]))
plot(training.subSetTrain.pca$sdev)
plot(training.subSetTrain.pca$x)
training.subSetTrain.pca <- prcomp(training.subSetTrain,center = T,scale. = T)
summary(training.subSetTrain.pca) # <- we can see that no one pricinple component encapsulated a large portion of the varience
plot(training.subSetTrain.pca$sdev)
plot(training.subSetTrain.pca$x)
training.subSetTrain.pca <- prcomp(training.subSetTrain[, -which(names(training.cleaned) == "classe")],center = T,scale. = T)
summary(training.subSetTrain.pca) # <- we can see that no one pricinple component encapsulated a large portion of the varience
plot(training.subSetTrain.pca$sdev)
plot(training.subSetTrain.pca$x)
data<-training.subSetTrain
df<-training.subSetTrain[, -which(names(training.cleaned) == "classe")]
PC<-prcomp(training.subSetTrain[, -which(names(training.cleaned) == "classe")],center = T,scale. = T)
PCi<-data.frame(PC$x,Species=data$classe)
ggplot(PCi,aes(x=PC1,y=PC2,col=classe))+
geom_point(size=3,alpha=0.5)+ #Size and alpha just for fun
scale_color_manual(values = c("#FF1BB3","#A7FF5B","#99554D"))+ #your colors here
theme_classic()
View(PCi)
PCi<-data.frame(PC$x,classe=data$classe)
ggplot(PCi,aes(x=PC1,y=PC2,col=classe))+
geom_point(size=3,alpha=0.5)+ #Size and alpha just for fun
scale_color_manual(values = c("#FF1BB3","#A7FF5B","#99554D"))+ #your colors here
theme_classic()
ggplot(PCi,aes(x=PC1,y=PC2,col=classe))+
geom_point(size=3,alpha=0.5)+ #Size and alpha just for fun
#]scale_color_manual(values = c("#FF1BB3","#A7FF5B","#99554D"))+ #your colors here
theme_classic()
plot(training.subSetTrain.pca, type = "l")
install.packages("corrplot")
correlationMatrix <- cor(training.subSetTrain[, -which(names(training.cleaned) == "classe")])
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.9, exact=TRUE)
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.9, exact=TRUE)
excludeColumns <- c(highlyCorrelated, which(names(training.cleaned) == "classe"))
corrplot(correlationMatrix, method="color", type="lower", order="hclust", tl.cex=0.70, tl.col="black", tl.srt = 45, diag = FALSE)
library(corrplot)
corrplot(correlationMatrix, method="color", type="lower", order="hclust", tl.cex=0.70, tl.col="black", tl.srt = 45, diag = FALSE)
pcaPreProcess.subset <- preProcess(training.subSetTrain[, -excludeColumns], method = "pca", thresh = 0.99)
pcaPreProcess.subset
training.subSetTrain.pca.subset <- predict(pcaPreProcess.subset, training.subSetTrain[, -excludeColumns])
training.subSetTest.pca.subset <- predict(pcaPreProcess.subset, training.subSetTest[, -excludeColumns])
testing.pca.subset <- predict(pcaPreProcess.subset, testing.cleaned[, -classeIndex])
testing.pca.subset <- predict(pcaPreProcess.subset, testing.cleaned[, -which(names(training.cleaned)])
testing.pca.subset <- predict(pcaPreProcess.subset, testing.cleaned[, -which(names(training.cleaned))])
testing.pca.subset <- predict(pcaPreProcess.subset, testing.cleaned[, -which(names(training.cleaned) == "classe")])
testing.pca.subset
pcaPreProcess.subset
plot(pcaPreProcess.subset)
plot(pcaPreProcess.subset$ranges)
plot(pcaPreProcess.subset$dim)
plot(pcaPreProcess.subset$std)
plot(pcaPreProcess.subset$yj)
plot(pcaPreProcess.subset$invHyperbolicSine)
plot(pcaPreProcess.subset$et)
plot(pcaPreProcess.subset)
pcaPreProcess.subset
PC<-prcomp(training.subSetTrain[, -excludeColumns],center = T,scale. = T)
PCi<-data.frame(PC$x,classe=training.subSetTrain$classe)
ggplot(PCi,aes(x=PC1,y=PC2,col=classe))+
geom_point(size=3,alpha=0.5)+ #Size and alpha just for fun
#]scale_color_manual(values = c("#FF1BB3","#A7FF5B","#99554D"))+ #your colors here
theme_classic()
modRfAll <- train(classe ~ ., data=training.subSetTrain, method="rf")
pcaPreProcess.subset
View(pcaPreProcess.subset)
modRfAll <- train(classe ~ ., data=training.subSetTrain[,-highlyCorrelated], method="rf")
setwd("~/Shiny/omics-app/Application_Loratio")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?numextract
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
